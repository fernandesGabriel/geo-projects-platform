name: Continuous Integration

on:
  push:
    branches:
      - "*"

env:
  NODE_TEST_CONCURRENCY: 5
  TURBO_TELEMETRY_DISABLED: 1

jobs:
  prepare:
    name: Lint and Build
    runs-on: ubuntu-22.04
    concurrency:
      group: ci-branch-${{ github.ref_name }}
      cancel-in-progress: true

    env:
      NODE_ENV: development

    steps:
      - id: repository-checkout
        name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - id: setup-pnpm
        name: Setup dependency manager
        uses: pnpm/action-setup@v4

      - id: setup-node
        name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version-file: "package.json"
          cache: "pnpm"

      - id: configure-pnpm
        name: Configure dependency manager
        run: pnpm config set global-bin-dir /usr/local/bin/

      - id: install-dependencies
        name: Install dependencies
        run: pnpm install

      - id: init-env-file
        name: Init .env file
        run: |
          touch .env
          echo "NODE_ENV=${{ env.NODE_ENV }}" >> .env

      - id: run-lint
        name: Run lint
        run: pnpm run lint

      - id: run-build
        name: Run build
        run: pnpm run build

  test:
    name: Test
    runs-on: ubuntu-22.04
    concurrency:
      group: ci-branch-${{ github.ref_name }}
      cancel-in-progress: true

    needs:
      - prepare

    env:
      NODE_ENV: test

    steps:
      - id: repository-checkout
        name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - id: setup-pnpm
        name: Setup dependency manager
        uses: pnpm/action-setup@v4

      - id: setup-node
        name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version-file: "package.json"
          cache: "pnpm"

      - id: configure-pnpm
        name: Configure dependency manager
        run: pnpm config set global-bin-dir /usr/local/bin/

      - id: install-dependencies
        name: Install dependencies
        run: pnpm install

      - id: setup-test-database
        name: Setup test database
        uses: neondatabase/create-branch-action@v5
        with:
          api_key: ${{ secrets.NEON_API_KEY }}
          project_id: ${{ vars.NEON_PROJECT_ID }}
          parent: ${{ vars.NEON_BASE_TEST_BRANCH_ID }}
          branch_name: run-${{ github.sha }}
          database: geo_project_platform
          username: geo_project_platform_owner

      - id: init-env-file
        name: Init .env file
        run: |
          touch .env
          echo "NODE_ENV=${{ env.NODE_ENV }}" >> .env
          echo "POSTGRES_DSN=${{ steps.setup-test-database.outputs.db_url }}" >> .env

      - id: run-build
        name: Run build
        run: pnpm run build

      - id: run-tests
        name: Run tests
        run: pnpm run test

      - id: clean-test-database
        name: Clean test database
        uses: neondatabase/delete-branch-action@v3
        with:
          api_key: ${{ secrets.NEON_API_KEY }}
          project_id: ${{ vars.NEON_PROJECT_ID }}
          branch: ${{ steps.setup-test-database.outputs.branch_id }}

  deploy:
    name: Deploy
    runs-on: ubuntu-22.04
    concurrency:
      group: ci-branch-${{ github.ref_name }}
      cancel-in-progress: true

    needs:
      - test

    env:
      NODE_ENV: production

    steps:
      - id: repository-checkout
        name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - id: prepare-deploy-cli
        name: Prepare Flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master

      - id: init-env-file
        name: Init .env file
        run: |
          touch .env
          echo "NODE_ENV=${{ env.NODE_ENV }}" >> .env

      - id: run-deploy
        name: Run Deploy
        run: FLY_API_TOKEN=${{ secrets.FLY_API_TOKEN }} flyctl deploy . --app geo-projects-service-api
